// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: img_pack.proto

package main

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImgPack struct {
	DeviceId      string `protobuf:"bytes,1,req,name=device_id,json=deviceId" json:"device_id"`
	TimestampSend int64  `protobuf:"varint,2,req,name=timestamp_send,json=timestampSend" json:"timestamp_send"`
	TimestampRecv int64  `protobuf:"varint,3,req,name=timestamp_recv,json=timestampRecv" json:"timestamp_recv"`
	Image         []byte `protobuf:"bytes,4,req,name=image" json:"image"`
}

func (m *ImgPack) Reset()         { *m = ImgPack{} }
func (m *ImgPack) String() string { return proto.CompactTextString(m) }
func (*ImgPack) ProtoMessage()    {}
func (*ImgPack) Descriptor() ([]byte, []int) {
	return fileDescriptor_341c0d70784e6b1a, []int{0}
}
func (m *ImgPack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImgPack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImgPack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImgPack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImgPack.Merge(m, src)
}
func (m *ImgPack) XXX_Size() int {
	return m.Size()
}
func (m *ImgPack) XXX_DiscardUnknown() {
	xxx_messageInfo_ImgPack.DiscardUnknown(m)
}

var xxx_messageInfo_ImgPack proto.InternalMessageInfo

func (m *ImgPack) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ImgPack) GetTimestampSend() int64 {
	if m != nil {
		return m.TimestampSend
	}
	return 0
}

func (m *ImgPack) GetTimestampRecv() int64 {
	if m != nil {
		return m.TimestampRecv
	}
	return 0
}

func (m *ImgPack) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*ImgPack)(nil), "ImgPack")
}

func init() { proto.RegisterFile("img_pack.proto", fileDescriptor_341c0d70784e6b1a) }

var fileDescriptor_341c0d70784e6b1a = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x4d, 0x8f,
	0x2f, 0x48, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x5a, 0xc4, 0xc8, 0xc5, 0xee,
	0x99, 0x9b, 0x1e, 0x90, 0x98, 0x9c, 0x2d, 0xa4, 0xc8, 0xc5, 0x99, 0x92, 0x5a, 0x96, 0x99, 0x9c,
	0x1a, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa4, 0xc1, 0xe9, 0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43,
	0x10, 0x07, 0x44, 0xd8, 0x33, 0x45, 0x48, 0x9b, 0x8b, 0xaf, 0x24, 0x33, 0x37, 0xb5, 0xb8, 0x24,
	0x31, 0xb7, 0x20, 0xbe, 0x38, 0x35, 0x2f, 0x45, 0x82, 0x49, 0x81, 0x49, 0x83, 0x19, 0xaa, 0x8e,
	0x17, 0x2e, 0x17, 0x9c, 0x9a, 0x87, 0xa6, 0xb8, 0x28, 0x35, 0xb9, 0x4c, 0x82, 0x19, 0xab, 0xe2,
	0xa0, 0xd4, 0xe4, 0x32, 0x21, 0x29, 0x2e, 0xd6, 0xcc, 0xdc, 0xc4, 0xf4, 0x54, 0x09, 0x16, 0x05,
	0x26, 0x0d, 0x1e, 0xa8, 0x1a, 0x88, 0x90, 0x93, 0xc4, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0x69, 0xa1, 0xa0, 0xa3, 0xcf, 0x00, 0x00, 0x00,
}

func (m *ImgPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImgPack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImgPack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintImgPack(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintImgPack(dAtA, i, uint64(m.TimestampRecv))
	i--
	dAtA[i] = 0x18
	i = encodeVarintImgPack(dAtA, i, uint64(m.TimestampSend))
	i--
	dAtA[i] = 0x10
	i -= len(m.DeviceId)
	copy(dAtA[i:], m.DeviceId)
	i = encodeVarintImgPack(dAtA, i, uint64(len(m.DeviceId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintImgPack(dAtA []byte, offset int, v uint64) int {
	offset -= sovImgPack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImgPack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	n += 1 + l + sovImgPack(uint64(l))
	n += 1 + sovImgPack(uint64(m.TimestampSend))
	n += 1 + sovImgPack(uint64(m.TimestampRecv))
	if m.Image != nil {
		l = len(m.Image)
		n += 1 + l + sovImgPack(uint64(l))
	}
	return n
}

func sovImgPack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImgPack(x uint64) (n int) {
	return sovImgPack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImgPack) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImgPack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImgPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImgPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgPack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImgPack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImgPack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampSend", wireType)
			}
			m.TimestampSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgPack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampSend |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampRecv", wireType)
			}
			m.TimestampRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgPack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampRecv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImgPack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImgPack
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImgPack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipImgPack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImgPack
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImgPack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("device_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp_send")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp_recv")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("image")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImgPack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImgPack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImgPack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImgPack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImgPack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImgPack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImgPack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImgPack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImgPack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImgPack = fmt.Errorf("proto: unexpected end of group")
)
